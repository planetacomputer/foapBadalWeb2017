use geronimost_prueba;

CREATE TABLE `T_OFFICES` (
  `OFFC_ID` INT NOT NULL,
  `OFFC_COUNTRY` VARCHAR(30) NOT NULL,
  `OFFC_DESCRIPTION` VARCHAR(90) NOT NULL,
  `OFFC_NAME` VARCHAR(30)
);
DROP TABLE `T_OFFICES`;

ALTER TABLE `T_OFFICES` 
DROP COLUMN `OFFC_NAME`;

ALTER TABLE `T_OFFICES` 
ADD COLUMN 
   `OFFC_CITY` VARCHAR(50) NOT NULL
   AFTER `OFFC_COUNTRY`;
   
ALTER TABLE `T_OFFICES` 
CHANGE COLUMN `OFFC_DESCRIPTION` `OFFC_DESCRIPTION` VARCHAR(100);

INSERT INTO `T_OFFICES`
(
  OFFC_ID,
  OFFC_COUNTRY,
  OFFC_CITY,
  OFFC_DESCRIPTION
)
VALUES
(
  10,
  'España',
  'Madrid',
  'Oficina central'
);

INSERT INTO `T_OFFICES`
(
  OFFC_ID,
  OFFC_COUNTRY,
  OFFC_CITY
)
VALUES
(
  11,
  'España',
  'Barcelona'
);

#Insercio multivalor. Agregar en una sola sentencia los siguientes valores.
INSERT INTO `T_OFFICES`
(
  OFFC_ID, OFFC_COUNTRY, OFFC_CITY, OFFC_DESCRIPTION
)
VALUES
(
  20, 'Chile', 'Santiago', 'Oficina principal de Chile'
),
(
  30, 'Argentina', 'Buenos Aires', NULL
);

#Seleccionar las columnas ID, COUNTRY y CITY de T_OFFICES, con los registros que cumplen con contener la palabra 'Oficina' en el campo DESCRIPTION.
SELECT OFFC_ID, OFFC_COUNTRY, OFFC_CITY 
FROM `T_OFFICES`
WHERE OFFC_DESCRIPTION LIKE '%Oficina%';

#Cambiar "Buenos Aires" por "Buenos aires" en el registro correspondiente, utilizando el ID en la condición.
UPDATE `T_OFFICES`
SET OFFC_CITY = 'Buenos aires'
WHERE OFFC_ID = 30;

#Crear la tabla T_KNOWLEDGE_LINES y agregarle datos, utilizando las siguientes sentencias
CREATE TABLE `T_KNOWLEDGE_LINES` (
  `KNLN_ID` INT(11) NOT NULL,
  `KNLN_NAME` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`KNLN_ID`)
);

INSERT INTO `T_KNOWLEDGE_LINES` (`KNLN_ID`, `KNLN_NAME`)
VALUES (10, 'Java');

INSERT INTO `T_KNOWLEDGE_LINES` (`KNLN_ID`, `KNLN_NAME`)
VALUES (20, '.NET');

INSERT INTO `T_KNOWLEDGE_LINES` (`KNLN_ID`, `KNLN_NAME`)
VALUES (30, 'Mainframe');

#Modificar la tabla T_OFFICES, colocando OFFC_ID como clave primaria
ALTER TABLE `T_OFFICES` 
ADD PRIMARY KEY (`OFFC_ID`);

#Crear la tabla T_EMPLOYEES, incluyendo su definición de clave primaria autogenerada
CREATE TABLE `T_EMPLOYEES` (
  `EMPL_ID` INT NOT NULL AUTO_INCREMENT,
  `OFFC_ID` INT NOT NULL,
  `KNLN_ID` INT,
  `EMPL_FORNAME` VARCHAR(50) NOT NULL,
  `EMPL_MIDDLE_NAME` VARCHAR(50),
  `EMPL_SURNAME` VARCHAR(50) NOT NULL,
  `EMPL_NUMBER` INT NOT NULL,
  `EMPL_HIRE_DATE` DATETIME NOT NULL,
  `EMPL_MENTOR_ID` INT,
  PRIMARY KEY (`EMPL_ID`));

#Insertar en la tabla T_EMPLOYEES el siguiente registro
INSERT INTO `T_EMPLOYEES`
(
  OFFC_ID,
  KNLN_ID,
  EMPL_FORNAME,
  EMPL_MIDDLE_NAME,
  EMPL_SURNAME,
  EMPL_NUMBER,
  EMPL_HIRE_DATE,
  EMPL_MENTOR_ID
)
VALUES
(
  10,
  10,
  'Pere',
  NULL,
  'Arnau',
  160,
  '2011-08-04',
  NULL
  
);

INSERT INTO `T_EMPLOYEES`
(
  OFFC_ID,
  KNLN_ID,
  EMPL_FORNAME,
  EMPL_MIDDLE_NAME,
  EMPL_SURNAME,
  EMPL_NUMBER,
  EMPL_HIRE_DATE,
  EMPL_MENTOR_ID
)
VALUES
(
  11,
  20,
  'Luis',
  NULL,
  'Gonzalez',
  161,
  '2006-05-06',
  2
);

INSERT INTO `T_EMPLOYEES`
(
  OFFC_ID,
  EMPL_FORNAME,
  EMPL_MIDDLE_NAME,
  EMPL_SURNAME,
  EMPL_NUMBER,
  EMPL_HIRE_DATE
)
VALUES
(
  20, 
  'Pedro',
  NULL,
  'Garcia',
  180,
  '2006-05-18'
);
#Crear la tabla de proyectos:
CREATE TABLE `T_PROJECTS` (
  `PRJT_ID` INT NOT NULL  AUTO_INCREMENT,
  `PRJT_CODE` VARCHAR(16) NOT NULL,
  `PRJT_NAME` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`PRJT_ID`));

#Crear la tabla de relación intermedia entre proyectos y empleados:
CREATE TABLE `T_PROJECTS_EMPLOYEES` (
  `PRJT_ID` INT NOT NULL,
  `EMPL_ID` INT NOT NULL,
  PRIMARY KEY (PRJT_ID, EMPL_ID));

#Añadir datos de proyectos
INSERT INTO `T_PROJECTS`
(
  PRJT_CODE,
  PRJT_NAME
)
VALUES
(
  'EXT-001000-01234',
  'Gestión de usuarios'
),
(
	'INT-001000-03200',
	'Cursos de formación'
);

#Añadir asociaciones entre proyecto y empleado
INSERT INTO `T_PROJECTS_EMPLOYEES`
(
  PRJT_ID,
  EMPL_ID
)
VALUES
(
  2,
  1
),
(
	2,
    2
),
(
	4,
    1
);

#error duplicate key per repetir la PK
INSERT INTO `T_PROJECTS_EMPLOYEES`
(
  PRJT_ID,
  EMPL_ID
)
VALUES
(
  2,
  1
);

#Añadir datos de proyectos
INSERT INTO `T_PROJECTS`
(
  PRJT_CODE,
  PRJT_NAME
)
VALUES
(
  'EXT-001000-01234',
  'Gestión de usuarios'
);


ALTER TABLE T_EMPLOYEES 
    ADD INDEX FK_EMPL_KNLN (KNLN_ID), 
    ADD CONSTRAINT FK_EMPL_KNLN 
        FOREIGN KEY (KNLN_ID) 
        REFERENCES T_KNOWLEDGE_LINES (KNLN_ID);
        
ALTER TABLE T_EMPLOYEES 
	ADD INDEX FK_EMPL_OFFC (OFFC_ID), 
	ADD CONSTRAINT FK_EMPL_OFFC 
		FOREIGN KEY (OFFC_ID) 
		REFERENCES T_OFFICES (OFFC_ID);
        
#Modificar la oficina del usuario Juan Pérez por el valor 40 (que no existe).
UPDATE T_EMPLOYEES
SET OFFC_ID = 40
WHERE EMPL_ID = 2;

#Eliminar la oficina 10, que es referenciada por un usuario
DELETE FROM T_OFFICES 
WHERE OFFC_ID = 10; 

#Desde T_PROJECTS_EMPLOYEES a T_PROJECTS, nombre FK_PREM_PRJT
ALTER TABLE T_PROJECTS_EMPLOYEES 
    ADD INDEX FK_PREM_PRJT (PRJT_ID), 
    ADD CONSTRAINT FK_PREM_PRJT 
        FOREIGN KEY (PRJT_ID) 
        REFERENCES T_PROJECTS (PRJT_ID);

#Desde T_PROJECTS_EMPLOYEES a T_EMPLOYEES, nombre FK_PREM_EMPL
ALTER TABLE T_PROJECTS_EMPLOYEES 
    ADD INDEX FK_PREM_EMPL (EMPL_ID), 
    ADD CONSTRAINT FK_PREM_EMPL 
        FOREIGN KEY (EMPL_ID) 
        REFERENCES T_EMPLOYEES (EMPL_ID);

#amb alies a les taules
SELECT e.EMPL_FORNAME, e.EMPL_SURNAME, o.OFFC_CITY, k.KNLN_NAME
FROM T_EMPLOYEES e
INNER JOIN T_OFFICES o
ON e.OFFC_ID = o.OFFC_ID
	LEFT OUTER JOIN T_KNOWLEDGE_LINES k
	ON e.KNLN_ID = k.KNLN_ID
    WHERE o.OFFC_COUNTRY IN ('España', 'Chile')
    AND e.EMPL_MENTOR_ID is NULL;

#sense alies de taules
SELECT T_EMPLOYEES.EMPL_FORNAME, T_EMPLOYEES.EMPL_SURNAME, T_OFFICES.OFFC_CITY, T_KNOWLEDGE_LINES.KNLN_NAME
FROM T_EMPLOYEES
INNER JOIN T_OFFICES
ON T_EMPLOYEES.OFFC_ID = T_OFFICES.OFFC_ID
	LEFT OUTER JOIN T_KNOWLEDGE_LINES
	ON T_EMPLOYEES.KNLN_ID = T_KNOWLEDGE_LINES.KNLN_ID
    WHERE T_OFFICES.OFFC_COUNTRY IN ('España', 'Chile')
    AND T_EMPLOYEES.EMPL_MENTOR_ID is NULL;

#5.2
SELECT p.PRJT_CODE, p.PRJT_NAME, e.EMPL_NUMBER, e.EMPL_SURNAME
FROM T_PROJECTS p
  INNER JOIN T_PROJECTS_EMPLOYEES pe
          ON p.PRJT_ID = pe.PRJT_ID
  INNER JOIN T_EMPLOYEES e
          ON pe.EMPL_ID = e.EMPL_ID
WHERE e.EMPL_FORNAME = 'Juan';

#5.2 
SELECT p.PRJT_CODE, p.PRJT_NAME, e.EMPL_NUMBER, e.EMPL_SURNAME
FROM T_EMPLOYEES e
INNER JOIN T_PROJECTS_EMPLOYEES pe
ON pe.EMPL_ID = e.EMPL_ID
INNER JOIN T_PROJECTS p
ON pe.PRJT_ID = p.PRJT_ID
WHERE e.EMPL_FORNAME = 'Juan'


#5-3
CREATE VIEW V_PROJECTS_EMPLOYEES 
(PRJT_CODE, PRJT_NAME, EMPL_NUMBER, EMPL_FORNAME , EMPL_SURNAME)
AS
SELECT p.PRJT_CODE, p.PRJT_NAME, e.EMPL_NUMBER, e.EMPL_FORNAME , e.EMPL_SURNAME
FROM T_PROJECTS p
  INNER JOIN T_PROJECTS_EMPLOYEES pe
          ON p.PRJT_ID = pe.PRJT_ID
  INNER JOIN T_EMPLOYEES e
          ON pe.EMPL_ID = e.EMPL_ID
          

CREATE VIEW V_PROJECTS_EMPLOYEES2 
(CODI_PROJECTE, NOM_PROJECTE, NUM_EMPLEAT, NOM_EMPLEAT, COGNOM_EMPLEAT)
AS
SELECT p.PRJT_CODE, p.PRJT_NAME, e.EMPL_NUMBER, e.EMPL_FORNAME , e.EMPL_SURNAME
FROM T_PROJECTS p
  INNER JOIN T_PROJECTS_EMPLOYEES pe
          ON p.PRJT_ID = pe.PRJT_ID
  INNER JOIN T_EMPLOYEES e
          ON pe.EMPL_ID = e.EMPL_ID
          
SELECT PRJT_CODE, PRJT_NAME, EMPL_NUMBER, EMPL_FORNAME, EMPL_SURNAME
FROM V_PROJECTS_EMPLOYEES
WHERE PRJT_CODE LIKE 'EXT%';

SELECT CODI_PROJECTE AS CODIGOPROYECTO, NOM_PROJECTE, NUM_EMPLEAT, NOM_EMPLEAT , COGNOM_EMPLEAT
FROM V_PROJECTS_EMPLOYEES2
WHERE CODI_PROJECTE LIKE 'EXT%';